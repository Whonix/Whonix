#!/bin/bash

set -x

error_handler() {
   local MSG="\
###########################################################
## Something went wrong. Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
###########################################################\
"
   echo "$MSG"
   exit 1
} 

trap "error_handler" ERR

## root check
if [ "$(id -u)" != "0" ]; then
    echo "ERROR: This must be run as root (sudo)!"
    exit 1
fi

stop_tor() {
      returncode=0
      service tor status || { returncode=$? ; true; };
      sync
      sleep 1
      
      if [ "$returncode" = "0" ]; then      
         dialog --title "Info" --msgbox 'Tor still running. Stopping it now...' 640 480      
      
         returncode=0
         service tor stop || { returncode=$? ; true; };
         sync
         sleep 1
         
         dialog --title "Info" --msgbox 'Stopped Tor.' 640 480
      else
         dialog --title "Info" --msgbox 'Tor was already stopped.' 640 480
      fi
}

MSG="
Do you want to disable Tor?
"

TITLE="Disable Tor."

returncode=0
dialog --title "$TITLE" --yesno "$MSG" 640 480 || { returncode=$? ; true; };

if [ ! "$returncode" = "0" ]; then
   ## Back to main menu.
   whonixsetup
   exit 0
fi

## Check if Tor was already disabled.
## This is to prevent getting a /etc/tor/torrc with entry
## looking like ####DisableNetwork 1 (if the user chooses
## this option multiple times).
while read LINE; do
   if [ "$LINE" = "#DisableNetwork 0" ]; then      
      dialog --title "Success!" --msgbox '"DisableNetwork 0" was already commented out in /etc/tor/torrc.
So Tor should now be disabled.

whonixsetup really only deactivates Tor by commenting out "DisableNetwork 0" in /etc/tor/torrc.
Running it multiple times in a row achieves nothing.
In case of network problems, this is probably not the cause.
You can confirm that by manually checking if "DisableNetwork 0" has been commented out in /etc/tor/torrc.
' 640 480

      dialog --title "Info" --msgbox 'Checking if Tor is still running and stopping it if necessary...' 640 480

      stop_tor
      true "INFO: Ok, exit 1, so whonixsetup will end."
      ## Signal for whonixsetup to break the while loop.
      exit 1
   fi
done < "/etc/tor/torrc"

dialog --title "Info" --msgbox 'Trying to disable Tor...

Technically speaking, this will comment out "DisableNetwork 0" in /etc/tor/torrc.
' 640 480

## Comment out DisableNetwork 0 in /etc/tor/torrc.
returncode=0
ed -s /etc/tor/torrc <<< $',s/DisableNetwork 0/#DisableNetwork 0/g\nw' || { returncode=$? ; true; };

## Ensure changes get written to the disk right now.
sync

if [ "$returncode" = "0" ]; then
   stop_tor
   true "INFO: Ok, exit 1, so whonixsetup will end."
   ## Signal for whonixsetup to break the while loop.
   exit 1

   dialog --title "Success!" --msgbox 'Tor has been deactivated.

(Technically speaking, whonixsetup deactivated Tor by commenting out "DisableNetwork 0" in /etc/tor/torrc.)' 640 480
else
   dialog --title "ERROR!" --msgbox 'Tor could not be deactivated. Please report this bug!

(Technically speaking, whonixsetup could not deactivate Tor by commenting out "DisableNetwork 0" in /etc/tor/torrc (ed failed).)' 640 480

   dialog --title "WARNING" --msgbox 'Will at least stop Tor...
   
Warning: Since Tor could not be deactivated in /etc/tor/torrc, Tor will be reconnect, next time you reboot or restart Tor. You are advised to manually comment out "DisableNetwork 0" in /etc/tor/torrc and to run "sudo service tor stop" to ensure, that Tor will not start, if that is what you want.' 640 480

   stop_tor
   true "INFO: Ok, exit 1, so whonixsetup will end."
   ## Signal for whonixsetup to break the while loop.   
   exit 1
fi

