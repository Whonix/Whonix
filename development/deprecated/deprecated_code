# See LICENSE in root of Whonix source for copyright, license and authors.

# Removed code for various reasons.
# Subject for discussion about being readded.

# For extensive debugging use:
# sudo bash -x 2>/tmp/log TorBOX-Gateway
# This will set -x and redirect everything bash does to /tmp/log.
# nano /tmp/log

# Maximize Tor Browser windows.
#
# Out commented due to fingerprinting risks.
# Javascript is enabeld in Tor Browser by default and javascript
# can read the resolution.
#
# ( echo '/<applications>/a'; echo '<application class="Tor*" role="browser"> <maximized>yes</maximized> </application>'; echo '.'; echo 'wq') | sudo -u "$USERNAME" ed -s .config/openbox/rc.xml

# Win+Space shows Openbox menu.
#
# Out commented. We never advertised this feature and it's
# probably better if the user decides to activate it.
#
# ( echo '/<keyboard>/a'; echo '<keybind key="W-space"><action name="ShowMenu"><menu>root-menu</menu></action></keybind>'; echo '.'; echo 'wq') | sudo -u "$USERNAME" ed -s .config/openbox/rc.xml 

# Fix ugly corners in tint2rc.
#
# Out commented. It's up to the user to decide which
# style settings to choose.
#
# sudo -u "$USERNAME" ed -s .config/tint2/tint2rc <<< $',s/rounded = 7/rounded = 0/g\nw' 


# No longer deleting /var/lib/tor. We install but forbid to run software such as Tor we install.
# Therefore /var/lib/tor should be empty.
# Ensure to delete /var/lib/tor. It contains sensitive stuff like the Tor consensus and the Tor entry guards.
# rm -r /var/lib/tor/* || true

# Tor Borwser gpg verification

SOCKS_PORT_TBB_GPG="9116"
UWT_VAR="/usr/bin/uwt -t 5 -i "$GATEWAY_IP" -p "$SOCKS_PORT_TBB_GPG""
KEYSERVER="x-hkp://pool.sks-keyservers.net"

gpg_key_verification_error() {
trap "tb_error_handler" ERR

ZENITY_TYPE="--error"
output "\
ERROR: Could not verify GPG key.
ERROR: Tor Browser update failed! Try again later.\
"
progress_bar 100
exit 1
}

## Importing GPG keys...
debug "\
INFO: Importing GPG keys to the temporary directory gpgtmpdir...
INFO: The GPG keys will not be permanently added to your keyring.\
"
mkdir "gpgtmpdir"
chmod 700 "gpgtmpdir/"

## !!!VERIFY!!!
debug "\
INFO: Getting the GPG keys... Verify the fingerprints.
https://www.torproject.org/docs/signing-keys.html.en
http://idnxcnkne4qt76tg.onion/docs/signing-keys.html.en\
"

## !!!VERIFY!!!
debug "INFO: Getting Erinn Clark's GPG key..."
ERINN_FINGERPRINT="8738A680B84B3031A630F2DB416F061063FEE659"
debug "INFO: ERINN_FINGERPRINT: $ERINN_FINGERPRINT"
debug "INFO: You can ignore the libtorsocks warning about the DNS leak. See Design. There can be no DNS leaks."
$UWT_VAR /usr/bin/gpg \
--homedir gpgtmpdir --keyserver "$KEYSERVER" --recv "$ERINN_FINGERPRINT" || NETWORK_DOWN="1"

# Check if gpg failed.
if [ "$NETWORK_DOWN" = "1" ]; then
   ZENITY_TYPE="--error"
   output "Failed to fetch gpg key: "$ERINN_FINGERPRINT"
from keyserver: "$KEYSERVER"
Maybe the keyserver is down.

$DOWNLOAD_FAIL_HELP"
   progress_bar 100
   exit 1
fi

 ## !!!VERIFY!!!
debug "INFO: Getting Sebastian Hahn's GPG key..."
SEBASTIAN_FINGERPRINT="261C5FBE77285F88FB0C343266C8C2D7C5AA446D"
debug "INFO: SEBASTIAN_FINGERPRINT: $SEBASTIAN_FINGERPRINT"
debug "INFO: You can ignore the libtorsocks warning about the DNS leak. See Design. There can be no DNS leaks."
$UWT_VAR /usr/bin/gpg \
--homedir gpgtmpdir --keyserver "$KEYSERVER" --recv "$SEBASTIAN_FINGERPRINT" || NETWORK_DOWN="1"

# Check if gpg failed.
if [ "$NETWORK_DOWN" = "1" ]; then
   ZENITY_TYPE="--error"
   output "Failed to fetch gpg key: "$SEBASTIAN_FINGERPRINT"
from keyserver: "$KEYSERVER"
Maybe the keyserver is down.

$DOWNLOAD_FAIL_HELP"
   progress_bar 100
   exit 1
fi

## !!!VERIFY!!!
debug "INFO: Verifying Erinn Clark's GPG key..."
trap "gpg_key_verification_error" ERR
gpg --homedir "gpgtmpdir" --fingerprint "$ERINN_FINGERPRINT"
debug "INFO: Successfully verified Erinn Clark's GPG key."

## !!!VERIFY!!!
debug "INFO: Verifying Sebastian Hahn's GPG key..."
trap "gpg_key_verification_error" ERR
gpg --homedir "gpgtmpdir" --fingerprint "$SEBASTIAN_FINGERPRINT"
debug "INFO: Successfully verified Sebastian Hahn's GPG key."

# This assumes you rebooted after the last kernel update.
# Can not be used together with debootstrap!
# Not needed when using debootstrap.
#apt-get --config-file /usr/share/whonix/apt.conf --yes remove --purge $(dpkg -l|egrep '^ii  linux-(im|he)'|awk '{print $2}'|grep -v `uname -r`) || true

# This assumes you rebooted after the last kernel update.
# Can not be used together with debootstrap!
# Not needed when using debootstrap.
#apt-get --config-file /usr/share/whonix/apt.conf --yes remove --purge $(dpkg -l|egrep '^ii  linux-(im|he)'|awk '{print $2}'|grep -v `uname -r`) || true

config_home() {
trap "error_handler" ERR INT TERM

# Thanks to:
# https://bbs.archlinux.org/viewtopic.php?id=116451
# http://askubuntu.com/questions/98135/gnome-terminal-ignores-gtk-theme

# Fixing black on black for gnome-terminal.
# Thanks to: http://ubuntuforums.org/showthread.php?t=1513791
# Thanks to: https://gist.github.com/1397104
sudo -u "$USERNAME" gconftool-2 --set "/apps/gnome-terminal/profiles/Default/use_theme_background" --type bool false
sudo -u "$USERNAME" gconftool-2 --set "/apps/gnome-terminal/profiles/Default/use_theme_colors" --type bool false
sudo -u "$USERNAME" gconftool-2 --set "/apps/gnome-terminal/profiles/Default/foreground_color" --type string "#FFFFFFFFFFFF"
}

# Remove unnecessary packages to slim down the system.
# This list contains only packages, which waste space and are not required.
#apt-get --config-file /usr/share/whonix/apt.conf --yes remove --purge \
#vim vim-tiny vim-common ufw telnet tcpdump tasksel* strace ppp pppconfig \
#pppoeconf pciutils ntfs-3g mtr-tiny mlocate man-db manpages lshw libpci3 fuse-utils iso-codes \
#dosfstools logrotate aptitude || true

# No longer removing friendly-recovery. Quite useful in case disk got filled up
# and also errors on virtual disks happen sometimes.

# Remove unnecessary packages to slim down the system.
# This list contains only packages, which waste space and are not required.
#apt-get --yes remove --purge xserver-xorg-video-all xserver-xorg-video-ati xserver-xorg-video-fbdev \
#xserver-xorg-video-geode xserver-xorg-video-intel xserver-xorg-video-mach64 xserver-xorg-video-mga \
#xserver-xorg-video-neomagic xserver-xorg-video-nouveau xserver-xorg-video-openchrome \
#xserver-xorg-video-qxl xserver-xorg-video-r128  xserver-xorg-video-radeon xserver-xorg-video-s3 \
#xserver-xorg-video-savage xserver-xorg-video-siliconmotion xserver-xorg-video-sis xserver-xorg-video-sisusb \
#xserver-xorg-video-tdfx xserver-xorg-video-trident xserver-xorg-video-vmware fuse \
#geoip-database sound-theme-freedesktop fuse-utils aptitude pciutils hdparm lshw ftp parted telnet \
#mlocate ppp pppconfig pppoeconf bind9-host dosfstools strace mtr-tiny

# Tell bash-completion about missing man package because apt-get is not doing its job...
rm -r /etc/bash_completion.d/man/* || true

# Killing rsyslog so we can remove logs.
service rsyslog stop || true

# TO DO
# Which are safe?
# rm /usr/share/icons/nuoveXT2/icon-theme.cache
# cd /usr/share/locale &&  ls | grep -v en | xargs rm -r && cd /home/"$USERNAME"
# rm -r /usr/share/doc/* #(are we even allowed to do that, see licenses?)

config_vidalia() {
trap "error_handler" ERR INT TERM

# Not in use yet.
# Waiting for Vialia 0.3.

echo "
######################################################
config_vidalia
######################################################
"

# Vidalia config file gets copied by copyinto.

# Lift permissions to edit torrc to allow Vidalia editing torrc.
# There should be no security implications, since Whonix-Gateway is
# not a multi user environment, it's solely used to host Tor. On the
# other hand, for the Tor Browser Bundle, Tor, Vidalia and Tor Browser
# run under the very same user account.
chmod --recursive g+rw /etc/tor/torrc
chmod --recursive o+rw /etc/tor/torrc
}

usermod -a -G audio "$USERNAME"
sudo -u "$USERNAME" amixer
sudo -u "$USERNAME" amixer set Master 70 unmute
sudo -u "$USERNAME" amixer set PCM 70 unmute

start_vm() {
   trap "error_handler" ERR INT TERM

   : echo "whonix_createvm: $VMNAME starting..."

   sudo -u "$USERNAME" VBoxSDL --startvm "$VMNAME"

   : echo "whonix_createvm: Virtual Box terminated without error messages."
   : echo "whonix_createvm: This is no guarantee everything went well inside the VM."
}



################################################################ 
# no option chosen                                             #
################################################################ 
if [[ $# == 0 ]]; then
   : echo "No option chosen. Use -help for help."
   touch /home/"$USERNAME"/whonix_binary/WHONIX_BUILD_FAILED || true
   exit 1
fi

################################################################ 
# -help                                                        #
################################################################ 
if [[ "$1" = "-help" ]]; then
   script_help
   exit 0
fi

################################################################ 
# -tg-createimg                                                #
################################################################ 
if [[ "$1" = "-tg-createimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   VMSIZE="2G"
   create_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-copyimg                                                  #
################################################################ 
if [[ "$1" = "-tg-copyimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   copy_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-converttovdi                                             #
################################################################ 
if [[ "$1" = "-tg-converttovdi" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   convert_to_vdi
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-createvboxvm                                             #
################################################################ 
if [[ "$1" = "-tg-createvboxvm" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   VMRAM="128"
   general_setup
   gateway_specific
   hardware_modifications
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-copyinto                                                 #
################################################################ 
if [[ "$1" = "-tg-copyinto" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   copy_into_vm_image_whonix_gateway
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-chroot                                                   #
################################################################ 
if [[ "$1" = "-tg-chroot" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   inside_chroot
   do_unchroot
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-interactive                                              #
################################################################ 
if [[ "$1" = "-tg-interactive" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   interactive_chroot
   do_unchroot
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-source                                                   #
################################################################ 
if [[ "$1" = "-tg-source" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   download_sources
   do_unchroot
   move_sources
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-export                                                   #
################################################################ 
if [[ "$1" = "-tg-export" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   ## TO DO: Snapshot not included in exported ova.
   #: echo "whonix_createvm: Creating snapshot..."
   #sudo -u "$USERNAME" VBoxManage snapshot "$VMNAME" take "default" --description "$SNAPSHOT_DESCRIPTION"
   sudo -u "$USERNAME" VBoxManage export "$VMNAME" --output "$HOMEVAR/whonix_binary/$VMNAME".ova
   : echo "BUILD INFO: Done."
   exit 0
fi

################################################################ 
# -tg-vboxdelete                                               #
################################################################ 
if [[ "$1" = "-tg-vboxdelete" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   delete_vm
   exit 0
fi

################################################################ 
# -tg-bare-metal                                               #
################################################################ 
if [[ "$1" = "-tg-bare-metal" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=""
   copy_into_vm_image_whonix_gateway
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-createimg                                                #
################################################################ 
if [[ "$1" = "-tw-createimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   VMSIZE="50G"
   create_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-copyimg                                                  #
################################################################ 
if [[ "$1" = "-tw-copyimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   copy_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-converttovdi                                             #
################################################################ 
if [[ "$1" = "-tw-converttovdi" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   convert_to_vdi
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-createvboxvm                                             #
################################################################ 
if [[ "$1" = "-tw-createvboxvm" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   VMRAM="768"
   general_setup
   workstation_specific
   hardware_modifications
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-copyinto                                                 #
################################################################ 
if [[ "$1" = "-tw-copyinto" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   copy_into_vm_image_whonix_workstation
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-chroot                                                   #
################################################################ 
if [[ "$1" = "-tw-chroot" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   inside_chroot
   do_unchroot
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-interactive                                              #
################################################################ 
if [[ "$1" = "-tw-interactive" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   interactive_chroot
   do_unchroot
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-source                                                   #
################################################################ 
if [[ "$1" = "-tw-source" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   download_sources
   do_unchroot
   move_sources
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-export                                                   #
################################################################ 
if [[ "$1" = "-tw-export" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   ## TO DO: Snapshot not included in exported ova.
   #: echo "whonix_createvm: Creating snapshot..."
   #sudo -u "$USERNAME" VBoxManage snapshot "$VMNAME" take "default" --description "$SNAPSHOT_DESCRIPTION"
   sudo -u "$USERNAME" VBoxManage export "$VMNAME" --output "$HOMEVAR/whonix_binary/$VMNAME".ova
   : echo "BUILD INFO: Done."
   exit 0
fi

################################################################ 
# -tw-vboxdelete                                               #
################################################################ 
if [[ "$1" = "-tw-vboxdelete" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   delete_vm
   exit 0
fi

################################################################ 
# -tw-bare-metal                                               #
################################################################ 
if [[ "$1" = "-tw-bare-metal" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=""
   copy_into_vm_image_whonix_workstation
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-mountimg                                                 #
################################################################ 
if [[ "$1" = "-tg-mountimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tg-unmountimg"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################ 
# -tg-unmountimg                                               #
################################################################ 
if [[ "$1" = "-tg-unmountimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   unmount_img
   : echo "INFO: unmount done."
   exit 0
fi

################################################################ 
# -tw-mountimg                                                 #
################################################################ 
if [[ "$1" = "-tw-mountimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tw-unmountimg"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################ 
# -tw-unmountimg                                               #
################################################################ 
if [[ "$1" = "-tw-unmountimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   unmount_img
   echo "INFO: unmount done."
   exit 0
fi

################################################################ 
# -tg-mountvdi                                                 #
################################################################ 
if [[ "$1" = "-tg-mountvdi" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_vdi
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tg-unmountvdi"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################ 
# -tg-unmountvdi                                               #
################################################################ 
if [[ "$1" = "-tg-unmountvdi" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   unmount_vdi
   : echo "INFO: unmount done."
   exit 0
fi

################################################################ 
# -tw-mountvdi                                                 #
################################################################ 
if [[ "$1" = "-tw-mountvdi" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_vdi
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tw-unmountvdi"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################ 
# -tw-unmountvdi                                               #
################################################################ 
if [[ "$1" = "-tw-unmountvdi" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   unmount_vdi
   echo "INFO: unmount done."
   exit 0
fi

#################
## am_I_sourced #
#################

## Thanks to:
## Wirawan Purwanto
## http://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced

am_I_sourced() {
  if [ "${FUNCNAME[1]}" = source ]; then
    if [ "$1" = -v ]; then
      true
    fi
    return 0
  else
    if [ "$1" = -v ]; then
      true
    fi
    return 1
  fi
}

if am_I_sourced -v; then
  true
else
  run-chroot-script-img
fi

   ## No longer neccessary.
   ## Lets keep it in case we need it again.
   #locale-gen en_US.UTF-8
   #dpkg-reconfigure locales 
   #echo 'LANG="en_US.UTF-8"' > /etc/default/locale

   ###############
   ## Discussion #
   ###############

   ## Discussion: we may also think about mounting everything,
   ##             i.e. recursively mounting.
   ##             i.e. mount --rbind

   ## Discussion: This would leak uuid of the host disk!
   ##  We would need to phrase it and somehow to remove the uuids. How?
   ##  And only use relevant stuff...
   ##  grep -v rootfs /proc/mounts > /etc/mtab

   ## No longer needed?
   ## Missing info on mounted /dev/loop, needs testing.
   ## (proper) Please elborate.
   #echo "/dev/sda1 / ext4 rw,noatime,errors=remount-ro 0 0
   #proc /proc proc rw,noexec,nosuid,nodev 0 0
   #sysfs /sys sysfs rw,noexec,nosuid,nodev 0 0
   #none /sys/fs/fuse/connections fusectl rw 0 0
   #none /sys/kernel/debug debugfs rw 0 0
   #none /sys/kernel/security securityfs rw 0 0
   #udev /dev devtmpfs rw,mode=0755 0 0
   #devpts /dev/pts devpts rw,noexec,nosuid,gid=5,mode=0620 0 0
   #tmpfs /run tmpfs rw,noexec,nosuid,size=10%,mode=0755 0 0
   #none /run/lock tmpfs rw,noexec,nosuid,nodev,size=5242880 0 0
   #none /run/shm tmpfs rw,nosuid,nodev 0 0" > /etc/mtab

   ## REVIEW: not sure if we better mount more or less of them.

   #############
   ## /dev/pts #
   #############

   ## Fixes "Can not write log, openpty() failed (/dev/pts not mounted?)"
   ## Thanks to
   ## http://www.gentoo.org/proj/en/base/amd64/howtos/index.xml?part=1&chap=2
   ## for the idea.
   ## Would not be needed if we used mount --rbind.
   ## REVIEW: not sure if we better ommit it.
   #mount -o bind /dev/pts "$CHROOT_FOLDER"/dev/pts

## Deactivate swap partition. Will not be created when using preseed.
## Deactivating anyway just in case anyone manually installs the operating system.
## No longer required since using debootstrap.
#swapoff /dev/sda5 || true

## Share the same uuid among all Whonix users.
## Setting anyway just in case anyone manually installs the operating system
## and then applies the script.
## No longer required since using debootstrap.
#mkswap /dev/sda5 -U 9159bf6e-e242-4510-b4c1-348db252feff || true

## /etc/fstab gets copied into VM by whonix_image copyinto.

#!/bin/bash

set -x

error_handler() {
   echo "
###################################
## chroot script: ERROR detected. #
###################################
"

   exit 1
} 

trap "error_handler" ERR INT TERM

sudo -u user crontab -l || true
sudo -u user crontab /usr/share/whonix/user_crontab
sudo -u user crontab -l


   ## Non-intrusive notification, that the checks are running in background.
   ## TO DO: After the timeout bug has been fixed upstream, --expire-time has to be set to 30.
   #notify-send --urgency low --expire-time 0 --app-name "Whonix" "$NOTIFY_MSG"
   
   ## this is not the most stable daemon...
   ## Not used as we switched from notify-send to zenity
   #if [ "$(pgrep -f notification-daemon)" = "" ]; then
   #   /usr/lib/notification-daemon/notification-daemon &
   #fi

   ## check if notify-send is installed
   ## that is not the case for cli users
   ## this is also not the case on Whonix-Gateway
   #if [ `which notify-send` = "" ]; then
   #   notify-send() {
   #      ## dummy
   #      true
   #   }
   #fi
   
#########################################################################
## tb_create_user_js                                                    #
#########################################################################

tb_create_user_js() {
trap "tb_error_handler" ERR

## Editing /home/"$USERNAME"/tor-browser_"$TB_LANG"/Data/profile/users.js
## http://kb.mozillazine.org/User.js_file
## Configuring Tor Button to use SOCKSPort

echo '
## Begin of patched user.js.
## If you edit this file while Firefox is running, your changes will be
## overwritten, when you close Firefox.

## How to create the user.js network settings:
## 1. Make a backup of prefs.js.
## 1. Start Tor Browser with the patched start script.
## 2. Apply proxy settings using the Tor Button settings dialog..
## 3. Make a diff from the old and the new pref.js.
## 4. Copy the relevant changes to user.js.

## network settings
## (Are now set in /etc/environment - or not...)
## (See /etc/environment.)
user_pref("extensions.torbutton.use_privoxy", false);
user_pref("extensions.torbutton.settings_method", "custom");
user_pref("extensions.torbutton.socks_host", "192.168.0.10");
user_pref("extensions.torbutton.socks_port", 9100);
user_pref("network.proxy.socks", "192.168.0.10");
user_pref("network.proxy.socks_port", 9100);
user_pref("extensions.torbutton.custom.socks_host", "192.168.0.10");
user_pref("extensions.torbutton.custom.socks_port", 9100);

## End of Whonix user.js.
' >> tor-browser_"$TB_LANG"/Data/profile/user.js

}

## Check if xhost is installed, only the case on graphical Whonix-Workstation,
## to avoid an error message, if it is not installed.
if [ ! `which xhost` = "" ]; then
   ## Add xhost exception, as required for zenity, since cron starts as root and
   ## whonixcheck (zenity) starts as user.
   ## Thanks to:
   ##    http://promberger.info/linux/2009/01/02/running-x-apps-like-zenity-from-crontab-solving-cannot-open-display-problem/
   ## For Debugging.
   #sudo -u user xhost +local:user || true
   ## Non-debugging. Hide non-important message from user.
   sudo -u user xhost +local:user > /dev/null || true
fi

## 1) Prepare directory for the disabled plugins.
mkdir --parents /usr/lib/xchat/plugins.disabled/

## Disable unnecessary plugins (keep perl for sasl).
#mv /usr/lib/xchat/plugins/{python.*,tcl.*} /usr/lib/xchat/plugins.disabled/ || true

## 2) Move all plugins to plugins.disabled.
mv /usr/lib/xchat/plugins/* /usr/lib/xchat/plugins.disabled/ || true

true "INFO: Listing missing files..."
true "      (Only an information, no check...)"
true "      (Has to be reviewed manually by the builder.)"
true "      Note:"
true "      - /usr/share/applications/kde4/knetattach.desktop (from kde-runtime package)"
true "      - /usr/lib/xchat/plugins/python.so (from xchat package)"
true "      - /usr/lib/xchat/plugins/tcl.so (from xchat package)"
true "      are expected to be missing (after running the later chroot-scripts at least once)."

debsums --silent || true

true "INFO: Listed missing files."

echo "Adding htpdate init script..."
update-rc.d htpdate defaults
 
## NTP does not work over Tor because it uses UDP.
## If it were to work, it would not be secure, because
## it is by default not encrypted. Whonix has its own
## safe network time synchronization mechanism. See
## Whonix design.
echo "ntpdate hold" | dpkg --set-selections

## Not installing Debian popularity contest do to privacy concerns.
echo "popularity-contest hold" | dpkg --set-selections

## Not installing resolvconf as it can modify DNS settings,
## resulting in not using Tor as DNS resolver. Advanced users
## should knowingly install resolvconf or edit /etc/resolv.conf
## manually.
echo "resolvconf hold" | dpkg --set-selections

## Not installing the Ubuntu version of popularity-contest.
## Only interesting for custom builds.
echo "canonical-census hold" | dpkg --set-selections

## Not installing Ubuntu packages with privacy concerns.
## Only interesting for custom builds.
echo "unity-lens-shopping hold" | dpkg --set-selections
echo "unity-scope-video-remote hold" | dpkg --set-selections
echo "unity-scope-musicstores hold" | dpkg --set-selections
echo "geoclue-ubuntu-geoip hold" | dpkg --set-selections
echo "geoclue hold" | dpkg --set-selections

## Not installing uncomplicated firewall, because it
## conflicts with Whonix own firewall started by
## /etc/network/interfaces pre-up.
## Only interesting for custom builds.
echo "ufw hold" | dpkg --set-selections

hardware_modifications() {
   trap "error_handler_general" ERR INT TERM

   ## Thanks to:
   ## - http://www.dedmeet.com/software-projects-mainmenu-12/asus-recovery-cd-with-virtualbox.html
   ## - https://www.virtualbox.org/ticket/7325
   ## Hiding BIOS information.
   ##
   ##
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVendor'        'American Megatrends Inc.'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVersion'       'string:N61Jq.204'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseDate'   'string:01/05/2010'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMajor'  '4'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMinor'  '6'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMajor' '152'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMinor' '152'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor'      'ASUSTeK Computer Inc.'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct'     'N61Jq'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVersion'     '1.0'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemSerial'      '###############'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemUuid'        '###############'
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemFamily'      'To Be Filled By O.E.M.'
   ##
   ##
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVendor"        "BIOS Vendor"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVersion"       "BIOS Version"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseDate"   "BIOS Release Date"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMajor"  1
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMinor"  2
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMajor" 3
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMinor" 4
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor"      "System Vendor"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct"     "System Product"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemVersion"     "System Version"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemSerial"      "System Serial"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemSKU"         "System SKU"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemFamily"      "System Family"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemUuid"        "9852bf98-b83c-49db-a8de-182c42c7226b"

   ## TO DO VBOX: Wait for next Virtual Box version.
   ## Not yet available.
   ## http://wiki.ubuntuusers.de/Dualboot-Windows_virtualisieren
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisAssetTag" "<EMPTY>"
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisSerial" "<EMPTY>"
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisVendor" "string:Medion"
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisVersion" "string:N/A"
   ## https://forums.virtualbox.org/viewtopic.php?f=2&t=43678
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBoardProduct""D2560-A2"
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBoardVendor" "FUJITSU SIEMENS"
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct" "ESPRIMO P"
   #sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor" "FUJITSU SIEMENS"

   ## Configuring the hard disk vendor product data (VPD)
   ## http://www.virtualbox.org/manual/ch09.html#changevpd

   ## Port0 (hdd)
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/SerialNumber" "serial"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/FirmwareRevision" "firmware"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ModelNumber" "model"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ATAPIVendorId" "vendor"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ATAPIProductId" "product"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ATAPIRevision" "revi"

   ## Port1 (cd-rom)
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/SerialNumber" "serial"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/FirmwareRevision" "firmware"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ModelNumber" "model"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ATAPIVendorId" "vendor"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ATAPIProductId" "product"
   sudo -u "$USERNAME" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ATAPIRevision" "revi"

   ## Show changes.
   sudo -u "$USERNAME" VBoxManage getextradata "$VMNAME" enumerate
} 

   ## VM UUID
   ## Thanks to:
   ## http://www.windowstablettv.com/windows-tips/190-virtualbox-clone-windows-activation/
   sudo -u "$USERNAME" VBoxManage modifyvm "$VMNAME" --hardwareuuid "dbc5316a-2600-4d6e-8964-a07f3de5ded8"

   ## HD UUID
   ## Thanks to:
   ## http://michail.flouris.net/2011/11/virtualbox-vm-disk-clone-uuid-problem/
   sudo -u "$USERNAME" VBoxManage internalcommands sethduuid "$HOMEVAR/VirtualBox VMs/$VMNAME/$VMNAME.vdi" "0156199f-6e83-4cd6-97b7-c9e24d9cd26d"
   
   ## VM UUID
   ## Thanks to:
   ## https://forums.virtualbox.org/viewtopic.php?f=2&t=22653&start=75
   sudo -u "$USERNAME" VBoxManage modifyvm "$VMNAME" --hardwareuuid "05f2222c-9697-485b-b105-267a36c401fc"

   ## HD UUID
   ## Thanks to:
   ## http://mixeduperic.com/ubuntu/how-to-copy-a-virtualbox-virtual-machine-in-ubuntu.html
   sudo -u "$USERNAME" VBoxManage internalcommands sethduuid "$HOMEVAR/VirtualBox VMs/$VMNAME/$VMNAME.vdi" "77d55d86-800c-4667-9e60-678f81a50913"   

export SNAPSHOT_DESCRIPTION="
   Reverts your Virtual Machine back to a clean state.
   All changes, all installed packages, all data you created will be lost!
"

   for FINGERPRINT in $(\
      sudo -u "$USERNAME" gpg \
         --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
         --no-default-keyring \
         --with-colons \
         --keyid-format "0xlong" \
         --fingerprint \
         2>/dev/null \
         | awk -F: '$1 == "fpr" {print $10;}'\         
         ); do
 echo "XXX: $FINGERPRINT"        
            #export DEBSIGN_KEYID="$FINGERPRINT"
            #true "${cyan}$0 INFO: Fingerprint of local OpenPGP signing key is $FINGERPRINT. ${reset}"
   done         

cd "$WHONIX_SOURCE_PARENTDIR"

tar \
   --preserve-permissions \
   --create \
   --gzip \
   --exclude .git \
   --file whonix_"$WHONIX_BUILD_WHONIX_VERSION".orig.tar.gz \
   Whonix

## {{{ WHONIX_BUILD_NEW_DEB_REVISION_VERSION

WHONIX_BUILD_NEW_DEB_REVISION_VERSION=$(expr ${WHONIX_BUILD_OLD_DEB_REVISION_VERSION} + 1) || true

echo "WHONIX_BUILD_NEW_DEB_REVISION_VERSION: $WHONIX_BUILD_NEW_DEB_REVISION_VERSION"

## }}}

get_local_whonix_version() {
   trap "error_handler" ERR

   ## Find out installed Whonix version.
   ## Read only FIRST line.
   INSTALLED_WHONIX_VERSION="Could not read local Whonix version file. Please report this bug!"
   read -r INSTALLED_WHONIX_VERSION < /usr/share/whonix/version || true
   ## Remove ALL spaces.
   ## Thanks to
   ## http://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable
   INSTALLED_WHONIX_VERSION="${INSTALLED_WHONIX_VERSION//[[:space:]]}"
}

