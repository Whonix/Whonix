#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

## Using zenity with --no-markup for security reasons.

#set -x

main_function() {
   local i

   for i in /etc/whonix.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         source "$i"
      fi
   done

   if [ "$#" = "0" ]; then
      ## Zero arguments.
      local is_file="0"
   fi

   if [[ -f "${1+"$@"}" ]]; then
      local is_file="1"
   else
      local is_file="0"
   fi

   ## For simulating a Whonix-Gateway, comment in the next line and comment out the over next one.
   #if [ true ]; then

   if [ -f "/usr/share/whonix/whonix_gateway" ]; then
      local icon="/usr/share/whonix/icons/whonix.ico"

      if [ ! "$EDITOR" = "" ]; then
         local open_in_tool_bin="$EDITOR"
         local open_in_tool_bin_name="\$EDITOR $EDITOR"
      ## What other useful condition could we check to determine the default editor?
      #elif [ "1" = "2" ]; then
         #local open_in_tool_bin="?"
         #local open_in_tool_bin_name="?"
      else
         local open_in_tool_bin="kwrite"
         local open_in_tool_bin_name="KWrite"
      fi

      local open_in_tool_extra_opts=""

      if [ "$is_file" = "1" ]; then
         ## We could easily change our mind and ask for confirmation.
         local title="Whonix Confirm Open"
         #local msg="${1+"$@"} will be opened in $open_in_tool_bin_name. Continue?"

         local open_in_tool_return="0"
         $open_in_tool_bin $open_in_tool_extra_opts ${1+"$@"} >/dev/null 2>/dev/null || { local open_in_tool_return="$?" ; true; };
         exit "$open_in_tool_return"
      else
         local title="Whonix Confirm Open ERROR"
         local msg="Whonix does not support opening links on Whonix-Gateway for security reasons.

Use Tor Browser under Whonix-Workstation to browse the internet."
         zenity --no-markup --title="$title" --error --window-icon "$icon" --text "$msg"
         exit 0
      fi

   elif [ -f "/usr/share/whonix/whonix_workstation" ]; then
      local icon="/usr/share/whonix/icons/whonix.ico"
      local open_in_tool_bin="torbrowser"
      local open_in_tool_bin_name="Tor Browser"
      local open_in_tool_extra_opts="--new-window"
      local title="Whonix Confirm Open"

      local temp="${1+"$@"}"
      if [ "$temp" = "" ] || [ "$temp" = " " ]; then
         local msg="Do you want to open $open_in_tool_bin_name?"
      else
         if [ "$is_file" = "1" ]; then
            local type="file"
         else
            local type="link"
         fi
         local msg="The following $type will be opened in $open_in_tool_bin_name. Continue?

Be careful if $open_in_tool_bin_name is already running as your activities might get linked.

$temp
"
      fi
   else
      local icon="/usr/share/whonix/icons/whonix.ico"
      local title="Whonix Confirm Open ERROR"
      local msg="ERROR $0 script could not determine if this is whonix_gateway or whonix_workstation. Please report this bug."
      echo "$msg"
      zenity --no-markup --title="$title" --error --window-icon "$icon" --text "$msg"
      exit 1
   fi

   local answer="0"

   local ask_for_confirmation="1"
   if [ "$is_file" = "1" ]; then
      ## Got a File.
      if [ "$tb_link_confirmation_for_files" = "0" ]; then
         local ask_for_confirmation="0"
      else
         local ask_for_confirmation="1"
      fi
   else
      ## Got a Link.
      if [ "$tb_link_confirmation_for_links" = "0" ]; then
         local ask_for_confirmation="0"
      else
         local ask_for_confirmation="1"
      fi
   fi

   if [ "$ask_for_confirmation" = "1" ]; then
      zenity --no-markup --title="$title" --question --window-icon "$icon" --text "$msg" >/dev/null 2>/dev/null || { local answer="$?" ; true; };
   fi

   if [ "$answer" = "1" ]; then
      exit 0
   fi

   local which_return="0"
   which $open_in_tool_bin >/dev/null 2>/dev/null || { local which_return="$?" ; true; };

   if [ ! "$which_return" = "0" ]; then
      local msg="ERROR: $open_in_tool_bin does not exist! Please report this bug!"
      zenity --no-markup --title="$title" --error --window-icon "$icon" --text "$msg"
      exit 1
   fi

   local open_in_tool_return="0"
   $open_in_tool_bin $open_in_tool_extra_opts ${1+"$@"} >/dev/null 2>/dev/null || { local open_in_tool_return="$?" ; true; };

   if [ ! "$open_in_tool_return" = "0" ]; then
      local msg="ERROR: $open_in_tool_bin returned $open_in_tool_return! Please report this bug!"
      zenity --no-markup --title="$title" --error --window-icon "$icon" --text "$msg"
   fi

   exit "$open_in_tool_return"
}

main_function "${1+"$@"}"
